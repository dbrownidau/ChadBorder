/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    jcenter()
    maven {
      url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT' // The Spigot API with no shadowing. Requires the OSS repo.
    compileOnly 'org.bukkit:bukkit:1.14.4-R0.1-SNAPSHOT' // The Bukkit API with no shadowing.
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

processResources {

if (project.hasProperty('version')) {
    version = project.version + "-" + getCheckedOutGitCommitHash()
} else {
    version = getCheckedOutGitCommitHash()
}

    inputs.property "version", version
    
    from(sourceSets.main.resources.srcDirs) {
        include 'plugin.yml'
        expand 'version': version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'plugin.yml'
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Discord-Whitelist',
                   'Implementation-Version': version
    }
    from {
        configurations
            .compile
            .findAll { !it.name.endsWith('pom') }
            .collect { it.isDirectory() ? it : zipTree(it) }
        }  
}